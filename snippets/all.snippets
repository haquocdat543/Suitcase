snippet disk "Disk" b
${1:/dev/sbd1}	${2:/home/user/disk}	${3:ext4}	${4:defaults}	${5:0}       ${6:0}
endsnippet

snippet jk "Jenkin" b
pipeline {
    agent { label "${1:Jenkins-Agent}" }
    environment {
              APP_NAME = "${2:Pipeline}"
    }

    stages {
        stage("${3:Clean up}") {
            steps {
                cleanWs()
            }
        }

        stage("${4:Checkout from SCM}") {
               steps {
                   git branch: '${5:main}', credentialsId: '${6:github}', url: '${7:https://github.com/${8:haquocdat543}/${9:repoName}}'
               }
        }

        stage("${10:Update Deployment Tags}") {
            steps {
                sh """
                   ${11:cat deployment.yaml
                   sed -i 's/${APP_NAME}.*/${APP_NAME}:${IMAGE_TAG}/g' deployment.yaml
                   cat deployment.yaml}
                """
            }
        }

        stage("${12:Push the changed deployment file to Git}") {
            steps {
                sh """
                   ${13:git config --global user.name "${14:haquodat543}"
                   git config --global user.email "${15:wwwdatha543@gmail.com}"
                   git add deployment.yaml
                   git commit -m "${16:Update Deployment Manifest}"}
                """
                withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                  sh "git push https://github.com/${17:haquocdat543}/${18:repoName} ${19:main}"
                }
            }
        }
      
    }
}
endsnippet

snippet jkst "Jenkin stage" b
        stage("${1:Stage Name}") {
            steps {
                sh """
                   ${2:cat deployment.yaml
                   sed -i 's/${APP_NAME}.*/${APP_NAME}:${IMAGE_TAG}/g' deployment.yaml
                   cat deployment.yaml}
                """
            }
endsnippet


snippet gr "Group" b
[${1:groupName}]
$2

$3
endsnippet

snippet make "Test" b
CC = ${1:gcc}
SOURCE = ${2:*.c}
OUTPUT = ${3:output}.exe

build: compile run

compile:
	$(CC) -o $(OUTPUT) $(SOURCE) 
run:
	./$3.exe
endsnippet

### DOCKER
snippet dockerfile "Test" b
FROM ${1:node:18-alpine}
WORKDIR ${2:/app}
COPY ${3:. .}
RUN ${4:yarn install --production}
CMD ${5:["node", "src/index.js"]}
EXPOSE ${6:3000}
endsnippet

snippet vue "Test" b
FROM node:lts-alpine

# install simple http server for serving static content
RUN npm install -g http-server

# make the 'app' folder the current working directory
WORKDIR /app

# copy both 'package.json' and 'package-lock.json' (if available)
COPY package*.json ./

# install project dependencies
RUN npm install

# copy project files and folders to the current working directory (i.e. 'app' folder)
COPY . .

# build app for production with minification
RUN npm run build

EXPOSE 8080
CMD [ "http-server", "dist" ]
endsnippet
