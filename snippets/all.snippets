snippet disk "Disk" b
${1:/dev/sbd1}	${2:/home/user/disk}	${3:ext4}	${4:defaults}	${5:0}       ${6:0}
endsnippet

snippet jk "Jenkin" b
pipeline{
    agent { label 'Jenkin-Agent' }
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME=tool 'sonar'
        GIT_REPO_NAME = "argocd-test"
        GIT_USER_NAME = "haquocdat543"
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/haquocdat543/draft3.git'
            }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Vue1.0 \
                    -Dsonar.projectKey=Vue1.0 '''
                }
            }
        }
        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar' 
                }
            } 
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t vuev2 ."
                       sh "docker tag vuev2 haquocdat543/vuev2:latest "
                       sh "docker push haquocdat543/vuev2:latest "
                    }
                }
            }
        }
        stage("TRIVY"){
            steps{
                sh "trivy image haquocdat543/vuev2:latest > trivyimage.txt" 
            }
        }
	stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/haquocdat543/ArgoCD.git'
            }
        }
        stage('Update Deployment File') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github')]) {
                       NEW_IMAGE_NAME = "haquocdat543/vuev2:latest"
                       sh "sed -i 's|image: .*|image: $NEW_IMAGE_NAME|' deployment.yml"
                       sh 'git add deployment.yml'
                       sh "git commit -m 'Update deployment image to $NEW_IMAGE_NAME'"
                       sh "git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main"
                    }
                }
            }
        }
    }
}
endsnippet

snippet jkst "Jenkin stage" b
        stage("${1:Stage Name}") {
            steps {
                sh """
                   ${2:cat deployment.yaml
                   sed -i 's/${APP_NAME}.*/${APP_NAME}:${IMAGE_TAG}/g' deployment.yaml
                   cat deployment.yaml}
                """
            }
endsnippet


snippet gr "Group" b
[${1:groupName}]
$2

$3
endsnippet

snippet make "Test" b
CC = ${1:gcc}
SOURCE = ${2:*.c}
OUTPUT = ${3:output}.exe

build: compile run

compile:
	$(CC) -o $(OUTPUT) $(SOURCE) 
run:
	./$3.exe
endsnippet

### DOCKER
snippet dockerfile "Test" b
FROM ${1:node:18-alpine}
WORKDIR ${2:/app}
COPY ${3:. .}
RUN ${4:yarn install --production}
CMD ${5:["node", "src/index.js"]}
EXPOSE ${6:3000}
endsnippet

snippet vue "Test" b
FROM node:lts-alpine

# install simple http server for serving static content
RUN npm install -g http-server

# make the 'app' folder the current working directory
WORKDIR /app

# copy both 'package.json' and 'package-lock.json' (if available)
COPY package*.json ./

# install project dependencies
RUN npm install

# copy project files and folders to the current working directory (i.e. 'app' folder)
COPY . .

# build app for production with minification
RUN npm run build

EXPOSE 8080
CMD [ "http-server", "dist" ]
endsnippet
