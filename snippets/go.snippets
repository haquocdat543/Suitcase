snippet main "Go main func" b
package main

import "fmt"

func main() {
    fmt.Println("${1:Hello, World!}")$2
}
endsnippet

snippet v "Go variable" b
$1 := $2
endsnippet

snippet im "Go import" b
import {
${1:"fmt"}$2
}
endsnippet

snippet stf "Go Stringify" b
string($1)$2
endsnippet

snippet cm "Go Comment" i
// 
endsnippet

snippet st "Go Struct" b
type ${1:structName} struct {
$2
}
endsnippet

snippet v1 "Go var" b
var $1 := $2
endsnippet

snippet v2 "Go var" b
var $1 $2
endsnippet

snippet v3 "Go var equal" b
var $1 $2 = $3
endsnippet

snippet v4 "Go var array" b
var $1 = [${2:amount}]${3:type}{$4}$5
endsnippet

snippet pv "Percentage v" b
%v
endsnippet

snippet pt "Percentage t" b
%T
endsnippet

snippet c "Go constant" b
const $1 := $2
endsnippet

snippet pr "Go print" b
fmt.Println("${1:Hello, World!}")$2
endsnippet

snippet i1 "Go conditional statement" b
if $1 {
$2
}
endsnippet

snippet f "Go Function" b
func ${1:Name}(${2:parameters}) ${3:funcType} {
$4
}
endsnippet

snippet fr "Go Function return" b
func ${1:Name}(${2:parameters}) ${3:funcType} {
$4
return $5
}
endsnippet

# GOCUI 
snippet gquit "Gocui quit" b
func quit(g *gocui.Gui, v *gocui.View) error {
	return gocui.ErrQuit
}
endsnippet

snippet gkey "Gocui key" b
if err := g.SetKeybinding(${1:"hello"}, ${2:gocui.KeyCtrlC}, ${3:gocui.ModNone}, ${4:quit}); err != nil {
	${5:log.Panicln(err)}
}
endsnippet

snippet gview "Gocui view" b
func ${1:layout}(g *gocui.Gui) error {
	maxX, maxY := g.Size()
	if v, err := g.SetView(${2:"hello"}, ${3:maxX/2-7}, ${4:maxY/2}, ${5:maxX/2+7}, ${6:maxY/2+2}); err != nil {
		if err != gocui.ErrUnknownView {
			return err
		}
		fmt.Fprintln(v, ${7:"Hello world!"})
	}
	return nil
}
endsnippet

snippet gpr "Gocui print" b
fmt.Fprintln(v, ${1:"Hello world!"})$2
endsnippet

snippet gti "Gocui title" b
v.Title = ${1:"Commit"}
endsnippet

