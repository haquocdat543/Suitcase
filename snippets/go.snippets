snippet main "Go main func" b
package main

import "fmt"

func main() {
    fmt.Println("${1:Hello, World!}")$2
}
endsnippet

snippet v "Go variable" b
$1 := $2
endsnippet

snippet im "Go import" b
import (
${1:"fmt"}$2
)
endsnippet

snippet stf "Go Stringify" b
string($1)$2
endsnippet

snippet cm "Go Comment" i
// 
endsnippet

snippet st "Go Struct" b
type ${1:structName} struct {
$2
}
endsnippet

snippet pv "percentage v" i
%v
endsnippet

snippet pt "percentage t" i
%T
endsnippet

snippet v1 "Go var" b
var $1 := $2
endsnippet

snippet v2 "Go var" b
var $1 $2
endsnippet

snippet v3 "Go var equal" b
var $1 $2 = $3
endsnippet

snippet v4 "Go var array" b
var $1 = [${2:amount}]${3:type}{$4}$5
endsnippet

snippet pv "Percentage v" b
%v
endsnippet

snippet pt "Percentage t" b
%T
endsnippet

snippet c "Go constant" b
const $1 := $2
endsnippet

snippet pr "Go print" b
fmt.Println("${1:Hello, World!}")$2
endsnippet

snippet prf "Go printf" b
fmt.Printf("${1:Hello, World!}")$2
endsnippet

snippet i1 "Go conditional statement" b
snippet i1 "Go conditional statement" b
if $1 {
$2
}
endsnippet

snippet f "Go Function" b
func ${1:Name}(${2:parameters}) ${3:funcType} {
$4
}
endsnippet

snippet fr "Go Function return" b
func ${1:Name}(${2:parameters}) ${3:funcType} {
$4
return $5
}
endsnippet

snippet swc "Switch case" b
switch ${1:day} {
    case "Monday":
        fmt.Println("It's Monday.")
    case "Saturday", "Sunday":
        fmt.Println("It's the weekend.")
    default:
        fmt.Println("Invalid day.")
    }
endsnippet

snippet tt "Title" b
// ##########################################################################################
// $1
// ##########################################################################################
endsnippet

snippet fn "Function number" b
// function $1
endsnippet

# GOCUI 
snippet gquit "Gocui quit" b
func quit(g *gocui.Gui, v *gocui.View) error {
	return gocui.ErrQuit
}
endsnippet

snippet gkey "Gocui key" b
if err := g.SetKeybinding(${1:"hello"}, ${2:gocui.KeyCtrlC}, ${3:gocui.ModNone}, ${4:quit}); err != nil {
	${5:log.Panicln(err)}
}
endsnippet

snippet gview "Gocui view" b
func ${1:layout}(g *gocui.Gui) error {
	maxX, maxY := g.Size()
	if v, err := g.SetView(${2:"hello"}, ${3:maxX/2-7}, ${4:maxY/2}, ${5:maxX/2+7}, ${6:maxY/2+2}); err != nil {
		if err != gocui.ErrUnknownView {
			return err
		}
		fmt.Fprintln(v, ${7:"Hello world!"})
	}
	return nil
}
endsnippet

snippet gpr "Gocui print" b
fmt.Fprintln(v, ${1:"Hello world!"})$2
endsnippet

snippet gti "Gocui title" b
v.Title = ${1:"Commit"}
endsnippet

snippet gkbd "Gocui keybinding" b
func (gui *Gui) ${1:SetKeybindings}(g *gocui.Gui) error {

	// Exit Keybinding q
	if err := g.SetKeybinding("$2", nil, ${3:'q'}, gocui.ModNone, ${4:quit}); err != nil {
		return err
	}
	return nil
}
endsnippet

snippet gscrd "gocui scroll down" b
func (gui *Gui) scrollDownInfo(g *gocui.Gui, v *gocui.View) error {
	mainView := gui.getInfoView()
	mainView.Autoscroll = false
	ox, oy := mainView.Origin()

	reservedLines := 0
	_, sizeY := mainView.Size()
	reservedLines = sizeY

	totalLines := mainView.ViewLinesHeight()
	if oy+reservedLines >= totalLines {
		return nil
	}

	return mainView.SetOrigin(ox, oy+20)
}

endsnippet

snippet gscru "gocui scroll up" b
func (gui *Gui) scrollUpInfo(g *gocui.Gui, v *gocui.View) error {
	mainView := gui.getInfoView()
	mainView.Autoscroll = false
	ox, oy := mainView.Origin()
	newOy := int(math.Max(0, float64(oy-20)))
	return mainView.SetOrigin(ox, newOy)
}

endsnippet

snippet gscrr "gocui scroll right" b
func (gui *Gui) scrollRightInfo(g *gocui.Gui, v *gocui.View) error {
	infoView := gui.getInfoView()
	ox, oy := infoView.Origin()

	content := infoView.ViewBufferLines()
	var largestNumberOfCharacters int
	for _, txt := range content {
		if len(txt) > largestNumberOfCharacters {
			largestNumberOfCharacters = len(txt)
		}
	}

	sizeX, _ := infoView.Size()
	if ox+sizeX >= largestNumberOfCharacters {
		return nil
	}

	return infoView.SetOrigin(ox+20, oy)
}

endsnippet

snippet gscrl "gocui scroll left" b
func (gui *Gui) scrollLeftInfo(g *gocui.Gui, v *gocui.View) error {
	infoView := gui.getInfoView()
	ox, oy := infoView.Origin()
	newOx := int(math.Max(0, float64(ox-20)))

	return infoView.SetOrigin(newOx, oy)
}

endsnippet

snippet gginfo "gocui get info" b
func (gui *Gui) getInfoView() *gocui.View {
	v, _ := gui.g.View("info")
	return v
}

endsnippet

snippet gcginfo "gocui click get info" b
func (gui *Gui) onInfoClick(g *gocui.Gui, v *gocui.View) error {
	if _, err := g.SetCurrentView(v.Name()); err != nil {
		return err
	}
	return nil
}

endsnippet

snippet osge "Os get env" i
os.Getenv("${1:GIT_DIR}")$2
endsnippet

snippet osse "Os set env" i
os.Setenv("${1:GIT_DIR}", ${2:value})$3
endsnippet

snippet osue "Os unset env" i
os.Unsetenv("${1:GIT_DIR}")$3
endsnippet

snippet exec "Os exec" b
cmd := exec.Command(${1:"git", "status"})
output, err := cmd.CombinedOutput()
if err != nil {
	return fmt.Errorf("error running '${2:git status}': %v", err)
}$3
endsnippet

