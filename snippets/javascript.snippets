priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`

endsnippet

snippet fun "function (named)" b
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "function (assigned to var)"
${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`
endsnippet

# Drop priority so this only triggers when not beginning of line.
priority -51
snippet fun "function (anonymous)" w
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}$2
endsnippet
priority -50

snippet anf "function (anonymous)" i
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	${VISUAL}$0
}(${2:$1}))`!p snip.rv = semi(snip)`
endsnippet

snippet ;fe "Minify safe iife"
;(function`!p snip.rv = space_before_function_paren(snip)`(${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(function`!p snip.rv = space_before_function_paren(snip)`() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10})`!p snip.rv = semi(snip)`
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}
endsnippet

snippet switch
switch`!p snip.rv = keyword_spacing(snip)`(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break`!p snip.rv = semi(snip)`
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'${VISUAL}${1:case}':
	${VISUAL}$0
	break`!p snip.rv = semi(snip)`
endsnippet

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0`!p snip.rv = semi(snip)`
endsnippet

snippet us
'use strict'`!p snip.rv = semi(snip)`
endsnippet

snippet imp "import"
import ${2} from ${1}
endsnippet

# Debugging
snippet de
debugger`!p snip.rv = semi(snip)`
endsnippet
snippet cl "console.log"
console.log(${0})`!p snip.rv = semi(snip)`
endsnippet
snippet cd "console.debug"
console.debug(${0})`!p snip.rv = semi(snip)`
endsnippet
snippet ce "console.error"
console.error(${0})`!p snip.rv = semi(snip)`
endsnippet
snippet cw "console.warn"
console.warn(${0})`!p snip.rv = semi(snip)`
endsnippet
snippet ci "console.info"
console.info(${0})`!p snip.rv = semi(snip)`
endsnippet
snippet ct "console.trace"
console.trace(${0:label})`!p snip.rv = semi(snip)`
endsnippet
snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}")`!p snip.rv = semi(snip)`
${0:${VISUAL}}
console.timeEnd("$1")`!p snip.rv = semi(snip)`
endsnippet
snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}")`!p snip.rv = semi(snip)`
endsnippet
snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj})`!p snip.rv = semi(snip)`
endsnippet
snippet cclear "console.clear"
console.clear()`!p snip.rv = semi(snip)`
endsnippet
snippet cdir "console.dir"
console.dir(${0:obj})`!p snip.rv = semi(snip)`
endsnippet
snippet cdirx "console.dirxml"
console.dirxml(${1:object})`!p snip.rv = semi(snip)`
endsnippet
snippet cgroup "console.group"
console.group("${1:label}")`!p snip.rv = semi(snip)`
${0:${VISUAL}}
console.groupEnd()`!p snip.rv = semi(snip)`
endsnippet
snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}")`!p snip.rv = semi(snip)`
${0:${VISUAL}}
console.groupEnd()`!p snip.rv = semi(snip)`
endsnippet
snippet cprof "console.profile"
console.profile("${1:label}")`!p snip.rv = semi(snip)`
${0:${VISUAL}}
console.profileEnd()`!p snip.rv = semi(snip)`
endsnippet
snippet ctable "console.table"
console.table(${1:"${2:value}"})`!p snip.rv = semi(snip)`
endsnippet
snippet clstr "console.log stringified"
console.log(JSON.stringify(${0}, null, 2))`!p snip.rv = semi(snip)`
endsnippet
snippet lf  "lambda-function" b
const $1 = ($2) => {
	$3
}
endsnippet
snippet setup "setup function" b
setup($1) {
	$2
}
endsnippet

snippet backend "Express Sample" b
const express = require('express')
const mongoose = require('mongoose');
const cors = require('cors')
const bodyParser = require('body-parser')
const app = express()
const db = "${1:mongodb_url}"
const port = ${2:3000}

// app.get('/', (req, res) => {
//   res.header('Access-Control-Allowed-Origin',"*");
//   res.header('Access-Control-Allowed-Methods',"GET,HEAD,OPTIONS,POST,PUT,DELETE");
//   res.header('Access-Control-Allowed-Headers',"auth-token,Origin,X-Requested-With,Content-type,Accept"); 
//   next();
// })

app.use(express.json())
app.use(cors())
app.use(bodyParser.json())

// Router
const ${3:winnersRoute} = require('./routes/${4:winners}.js')
app.use('/${5:winners}',$3)

//MongoDD Connect
const connectDB = async () => {
	try {
		await mongoose.connect(db, {
			useNewUrlParser: true,
			useUnifiedTopology: true,
		})
			console.log("MongoDB connected")
	} catch (error) {
		console.log(error.message)
		process.exit(1)
	}
}

connectDB()

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})


endsnippet

snippet mg "Mongoose sample" b
const mongoose = require('mongoose');
const db = "${1:mongodb_url}"

const connectDB = async () => {
	try {
		await mongoose.connect(db, {
			useNewUrlParser: true,
			useUnifiedTopology: true,
		})
			console.log("mongodb connected")
	} catch (error) {
		console.log(error.message)
		process.exit(1)
	}
}

module.exports = connectDB
endsnippet
snippet appget "App get Express" b
app.get('${1:/}', (req, res) => {
  res.send(${2:'Hello World!'})
})
endsnippet
snippet appget1 "App get Express" b
app.get('/', (req, res) => {
  res.header('Access-Control-Allowed-Origin',"*");
  res.header('Access-Control-Allowed-Methods',"GET,HEAD,OPTIONS,POST,PUT,DELETE");
  res.header('Access-Control-Allowed-Headers',"auth-token,Origin,X-Requested-With,Content-type,Accept"); 
next();
})
endsnippet
snippet apppost "App post Express" b
app.post('${1:/}', (req, res) => {
  res.send(${2:'Hello World!'})
})
endsnippet
snippet appdelete "App get Express" b
app.delete('${1:/}', (req, res) => {
  res.send(${2:'Hello World!'})
})
endsnippet
snippet applisten "App listen Express" b
app.listen(${1:3000}, () => {
  console.log(${2:"Example app listening on port ${port}"})
})
endsnippet
snippet appuse "App use Express" b
app.use(${1:express.json()})
endsnippet

snippet appuse1 "App use Express, Cors, BodyParser" b
app.use(express.json())
app.use(cors())
app.use(bodyParser())
endsnippet

snippet rqr "require" b
const ${1:express} = require("${2:express}")
endsnippet

snippet mgapi "Mongoose api" b
const express = require('express')
const router = express.Router()
const ${1:Winner} = require('${2:../models/winners.js}')

router.get('${3:/}', async (req, res) => {
	const $1s = await $1.find();
	res.json($1s);
})

router.post('${4:/new}', async (req, res) => {
	const new$1 = new $1(
	{
		receiver: "Shuji Nakamura",
		country: "Japan",
		year: 2014
	});
	const saved$1 = await new$1.save()
	res.json(saved$1)
})

router.get('${5:/get/:id}', async (req, res) => {
	const $1Id = await $1.findById( req.params.id );
	res.json($1Id);
})

router.delete('${6:/delete/:id}', async (req, res) => {
	const $1DeleteById = await $1.findByIdAndDelete( req.params.id );
	res.json($1DeleteById);
})

router.put('${7:/update/:id}', async (req, res) => {
	const $1UpdateById = await $1.updateOne( {
	${8:receiver}: "${9:Leo Esaki}",
	${10:country}: "${11:Japan}",
	${12:year}: ${13:1973}
})
	res.json($1UpdateById)
})

module.exports = router
endsnippet
snippet rtfet "Router.get" b
router.get('${1:/}', async (req, res) => {
	const ${2:Winner}s = await $2.find();
	res.json($2s);
})
endsnippet
snippet rtpo "router.post" b
router.post('${1:/new}', async (req, res) => {
	const new${2:Winner} = new $2(req.body);
	const saved$2 = await new$2.save()
	res.json(saved$2)
})
endsnippet
snippet rtdel "router.delete" b
router.delete('${1:/delete/:id}', async (req, res) => {
	const ${2:Winner}DeleteById = await $2.findByIdAndDelete( req.params.id );
	res.json($2DeleteById);
})
endsnippet
snippet rtget "router.getById" b
router.get('${1:/get/:id}', async (req, res) => {
	const ${2:Winner}Id = await $2.findById( req.params.id );
	res.json($2Id);
})
endsnippet
snippet rtup "router.update" b
router.put('${1:/update/:id}', async (req, res) => {
	const $${2:Winner}UpdateById = await $2.updateOne( {
	${3:receiver}: "${4:Leo Esaki}",
	${5:country}: "${6:Japan}",
	${7:year}: ${8:1973}
})
	res.json($2UpdateById)
})
endsnippet
snippet api "Api" b
import Api from '@/services/Api'

export default {
  fetch${1:Winners} () {
    return Api().get('${1:winners}')
  },
}
endsnippet
snippet apifet "Api fetch" b
  fetch${1:Winners} () {
    return Api().get('${2:winners}')
  },
endsnippet
snippet apipo "Api Post" b
  add${1:Winners} (${2:params}) {
    return Api().post('${3:winners/new}', ${4:params})
  },
endsnippet
snippet apiup "Api Update" b
  update${1:Winners} (${2:params}) {
    return Api().put('${3:winners/update/}' + ${4:params.id}, ${5:params})
  },
endsnippet
snippet apiget "Api Get" b
  get${1:Winners} (${2:params}) {
    return Api().get('${3:winners/get/}' + ${4:params.id})
  },
endsnippet
snippet apidel "Api Del" b
  delete${1:Winners} (${2:id}) {
    return Api().delete('${3:winners/delete/}' + ${4:id})
  },
endsnippet
snippet router "Router" b
import Vue from 'vue'
import Router from 'vue-router'
import ${1:Hello} from '@/components/$1'
import ${2:winners} from '@/components/$2'

Vue.use(Router)


export default new Router({
  routes: [
    {
      path: '${3:/}',
      name: '$1',
      component: $1
    },
    {
      path: '${4:/winners}',
      name: '$2',
      component: $2
    }
  ]
})
endsnippet
snippet axios "Axios" b
import axios from 'axios'

export default() => {
  return axios.create({
    baseURL: "${1:http://localhost:3000}"
  })
}
endsnippet
snippet model "Model" b
const mongoose = require("mongoose")
const ${1:winnersSchema} = new mongoose.Schema({
	${2:receiver}: ${3:{
		type: ${4:String},
		require: ${5:true}
	}},
	${6:country}: ${7:String},
	${7:year}: ${8:Number}
})
module.exports = mongoose.model('${9:todo}',$1)
endsnippet
snippet cl "Click" b
@click="${1:addWinners}"
endsnippet
snippet mainjs "Main JS ( Vue )" b
import { createApp } from 'vue'
import App from './App.vue'
// import router from './routes'

const app = createApp(App)

// import Vue from 'vue'
import { createRouter, createWebHistory } from 'vue-router'
import ${1:winners} from '@/components/$1.vue'
import ${2:NewWinner} from '@/components/$2.vue'
import ${3:EditWinner} from '@/components/$3.vue'

// Vue.use(Router)

const router = createRouter({
history: createWebHistory(),
  routes: [
    {
      path: '${4:/winners}',
      name: '$1',
      component: $1
    },
    {
      path: '${5:/winners/new}',
      name: '$2',
      component: $2
    },
    {
      path: '${6:/winners/update/:id}',
      name: '$3',
      component: $3
    }
  ]
})

app.use(router)
app.mount('#app')
endsnippet
snippet winnersvue "winners.vue" b
<template>
  <div class="posts">
    <h1>Posts</h1>
    <div v-if=" winners && winners.length > 0" class="table-wrap">
      <div class="router">
        <router-link  :to="{ name: 'NewWinner' }" class="">Add</router-link>
      </div>
      <table>
        <tr>
          <td>Receiver</td>
          <td>Country</td>
          <td>Year</td>
          <td width="100" align="center">Action</td>
        </tr>
        <tr v-for="winner in winners" :key="winner._id">
          <td>{{ winner.receiver }}</td>
          <td>{{ winner.country }}</td>
          <td>{{ winner.year }}</td>
          <td align="center">
            <router-link :to="{ name: 'EditWinner', params: { id: winner._id } }">Edit</router-link> |
            <a href="#" @click="deleteWinners(winner._id)">Delete</a>
          </td>
        </tr>
      </table>
    </div>
    <div v-else>
      There are no winner .. Lets add one now <br /><br />
      <router-link :to="{ name: 'NewWinner' }" class="add_post_link">Add Winner</router-link>
    </div>
  </div>
</template>

<script>
import NobelPrizeWinners from '@/services/winners.js'
export default {
  name: 'NobelPrizeWinners',
  data () {
    return {
      winners: []
    }
  },
  mounted () {
    this.fetchWinners()
  },
  methods: {
    async fetchWinners () {
      const response = await NobelPrizeWinners.fetchWinners()
      this.winners = response.data
    },
    async deleteWinners (id) {
endsnippet
snippet newwinner "NewWinner.vue" b
<template>
  <div class="posts">
    <h1>Add Winners</h1>
      <div class="form">
        <div>
          <input type="text" name="title" placeholder="RECEIVER" v-model="receiver">
        </div>
        <div>
          <input type="text" name="title" placeholder="COUNTRY" v-model="country">
        </div>
	<div>
          <input type="number" name="title" placeholder="YEAR" v-model="year">
	</div>
        <div>
          <button class="app_post_btn" @click="addWinners">Add</button>
        </div>
      </div>
  </div>
</template>

<script>
import NobelPrizeWinners from '@/services/winners.js'
// import winnersVue from '@/components/winners.vue'
export default {
  name: 'NewWinner',
  data () {
    return {
      receiver: '',
      country: '',
      year: ''
    }
  },
  methods: {
    async addWinners () {
      await NobelPrizeWinners.addWinners({
        receiver: this.receiver,
        country: this.country,
        year: this.year
      })
      this.$router.push({ name: 'winners' })
//      winnersVue.fetchWinners()
    },
  }
}
</script>

<style type="text/css">
.form input, .form textarea {
  width: 500px;
  padding: 10px;
endsnippet
snippet editwinner "EditWinner.vue" b
<template>
  <div class="posts">
    <h1>Edit Post</h1>
      <div class="form">
        <div>
          <input type="text" name="title" placeholder="RECEIVER" v-model="receiver">
        </div>
        <div>
          <input type="text" name="title" placeholder="COUNTRY" v-model="country">
        </div>
	<div>
          <input type="number" name="title" placeholder="YEAR" v-model="year">
	</div>
        <div>
          <button class="app_post_btn" @click="updateWinners()">Update</button>
        </div>
      </div>
  </div>
</template>

<script>
import NobelPrizeWinners from '@/services/winners.js'
export default {
  name: 'EditWinner',
  data () {
    return {
      receiver: '',
      country: '',
      year: ''
    }
  },
  mounted () {
    this.fetchWinners()
  },
  methods: {
    async fetchWinners () {
      const response = await NobelPrizeWinners.fetchWinners({
        id: this.$route.params.id
      })
      this.receiver = response.data.receiver
      this.country = response.data.country
      this.year = response.data.year
    },
    async updateWinners () {
      await NobelPrizeWinners.updateWinners({
        id: this.$route.params.id,
        receiver: this.receiver,
        country: this.country,
        year: this.year
      })
endsnippet
snippet pool "PostgreSQL pool" b
import { Pool } from 'pg'

const pool = new Pool({
	host: '${1:mypostgresql.c6c8dntfzzhgv0.ap-northeast-1.rds.amazonaws.com}',
	port: '${2:5432}',
	user: '${3:haquocdat}',
	password: '${4:password}',
	database: '${5:account}'
});

module.exports = pool;
endsnippet
# vim:ft=snippets:
