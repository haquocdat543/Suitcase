snippet make "Simple makefile" b
CC = ${1:gcc}
SOURCE = ${2:*.c}
OUTPUT = ${3:output}.exe

build: compile run

compile:
	$(CC) -o $(OUTPUT) $(SOURCE) 
run:
	./$3.exe
endsnippet

snippet ghsc "Github variables & secrets [ CLI ]" b
GH_TOKEN=$(shell pass tungvv-vba/food-fe-be/access_token)
USERNAME=
REPOSITORY=

export GH_TOKEN

.PHONY: lv ls sv ss dv ds

lv:
	@echo "List variables"
	gh variable list --repo $(USERNAME)/$(REPOSITORY)
ls:
	@echo "List secrets"
	gh secret list --repo $(USERNAME)/$(REPOSITORY)
sv:
	@echo "Set variables"
	gh variable set AWS_REGION --repo ${USERNAME}/${REPOSITORY} --body ap-southeast-1
ss:
	@echo "Set secrets"
	gh secret set AWS_REGION --repo ${USERNAME}/${REPOSITORY} --body ap-southeast-1
dv:
	@echo "Delete variables"
	gh variable delete AWS_REGION --repo ${USERNAME}/${REPOSITORY}
ds:
	@echo "Delete secrets"
	gh secret delete AWS_REGION --repo ${USERNAME}/${REPOSITORY}
endsnippet

snippet golang "Makefile for golang build" b
build:
	echo "Compiling for every OS and Platform"
	GOOS=linux GOARCH=arm64 go build -o bin/linux/cronjob main.go
	GOOS=darwin GOARCH=arm64 go build -o bin/darwin/cronjob main.go

clean:
	echo "Clean binary directory"
	rm -rf bin
endsnippet

snippet docker "Makefile for docker build" b
NAME    := repo_name/image_name
TAG     := \$\$(git log -1 --pretty=%!H(MISSING))
IMG     := \${NAME}:\${TAG}
LATEST  := \${NAME}:latest

build:
  @docker build -t \${IMG} .
  @docker tag \${IMG} \${LATEST}

push:
  @docker push \${NAME}

login:
  @docker log -u \${DOCKER_USER} \${DOCKER_PASS}
endsnippet

snippet helm "Helm operation" b
## Basic configuration
VALUE="${1:override.yaml}"
RELEASE="${2:jenkins}"
CHART="${3:.}"
NAMESPACE="${4:monitoring}"
REPO="${5:jenkins/jenkins}" # jenkins/jenkins or . [ local template ]

## Template
TEMPLATE="${6:template.yaml}"

install:
	helm install $(RELEASE) $(CHART) --values $(VALUE) --namespace $(NAMESPACE)
upgrade:
	helm upgrade $(RELEASE) $(CHART) --values $(VALUE) --namespace $(NAMESPACE)
uninstall:
	helm uninstall $(RELEASE) --namespace $(NAMESPACE)
rollback:
	helm rollback $(RELEASE)
template:
	helm template $(RELEASE) $(REPO) -f $(VALUE) > $(TEMPLATE)
value:
	helm show values $(REPO) > values.yaml
chart:
	helm show chart $(REPO) > Chart.yaml
endsnippet

snippet terraform "Terraform" b
AWS_PROFILE=default

export AWS_PROFILE

.PHONY: plan apply destroy

plan:
	@echo "Running terraform plan"
	terraform init
	terraform plan

apply:
	@echo "Running terraform apply"
	terraform init
	terraform apply

destroy:
	@echo "Running terraform destroy"
	terraform init
	terraform destroy
output:
	@echo "Running terraform output"
	terraform init
	terraform output
gen:
	@echo "Generate terraform config"
	terraform init
	terraform plan -generate-config-out=generated.tf
endsnippet

snippet terragrunt "Terragrunt" b
AWS_PROFILE=default
AWS_ACCESS_KEY_ID=$(shell pass ghsv/aws/access_key)
AWS_SECRET_ACCESS_KEY=$(shell pass ghsv/aws/secret_key)
GIT_USERNAME=haquocdat543
GIT_ACCESS_TOKEN=$(shell pass ghsv/github_token/terragrunt)

export AWS_PROFILE
export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY
export GIT_USERNAME
export GIT_ACCESS_TOKEN

.PHONY: plan apply destroy

plan:
	@echo "Running terragrunt plan"
	terragrunt init
	terragrunt run-all plan --terragrunt-non-interactive

apply:
	@echo "Running terragrunt apply"
	terragrunt init
	terragrunt run-all apply --terragrunt-non-interactive

destroy:
	@echo "Running terragrunt destroy"
	terragrunt init
	terragrunt run-all destroy --terragrunt-non-interactive
output:
	@echo "Running terragrunt output"
	terragrunt init
	terragrunt run-all output --terragrunt-non-interactive
sensitive:
	@echo "Running terragrunt output"
	terragrunt init
	terragrunt run-all output --terragrunt-non-interactive -json > sensitive.json
endsnippet

snippet pn "Phony ( avoid same command and file name )" b
.PHONY: $1
endsnippet

snippet v1 "Variable at declaration" i
$1 = $2
endsnippet

snippet v2 "Variable at operation" i
$($1)$2
endsnippet

snippet ae "At echo ( print text )" b
@echo
endsnippet

snippet da "Dollar sign At ( print rule name )" b
$@
endsnippet

snippet dl "Dollar sign less ( print first prerequisite ) " b
$<
endsnippet

snippet dq "Dollar sign question ( print list of prerequisites newer than the target )" b
$?
endsnippet

snippet dad "Dollar sign At D ( print directory part of the target file's name )" b
$(@D)
endsnippet

snippet daf "Dollar sign At F ( print filename part of the target )" b
$(@D)
endsnippet

snippet dap "Dollar sign At P ( print directory part of the fisrt prerequisite )" b
$(@P)
endsnippet

snippet dam "Dollar sign At M ( print filename part of the first prerequisite )" b
$(@P)
endsnippet

snippet hunter "Hunter package manager for C integrated with Cmake" b
cmake_minimum_required(VERSION 3.1)
include("cmake/HunterGate.cmake")
HunterGate(
    URL "https://github.com/cpp-pm/hunter/archive/v0.23.252.tar.gz"
    SHA1 "0d002bb5b4d7879e2f76f9a6581e0d54b1b59ecb"
)

project(MyProject)

# Add your project configuration below
endsnippet
