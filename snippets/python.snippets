####################################################################################################
# PYTHON NATIVE
####################################################################################################

snippet im "Import" b
import $1
endsnippet

snippet swc "Switch case" b
def switch_case(day):
  """Processes a day of the week using match-case (Python 3.10+)"""
  match day:
    case "Monday":
      print("Start of the work week!")
    case "Tuesday" | "Wednesday" | "Thursday":
      print("Just another workday...")
    case "Friday":
      print("TGIF!")
    case "Saturday" | "Sunday":
      print("Weekend! ")
    case _:
      print("Invalid day!")
endsnippet

snippet sample "Sample" b
import sys, os

####################################################################################################
# GET INPUT AND VARIABLES
####################################################################################################

# get argument as variables
option = sys.argv[1]
second_arg = sys.argv[2]

# define basic variables
one = 1

####################################################################################################
# LOGIC
####################################################################################################

# 1 - print argument
def print_arg(content):
    print(f"{content}")

####################################################################################################
# SWITCH CASE OPTION
####################################################################################################

# switch case definition
def switch_case(option):
  """Processes option using match-case (Python 3.10+)"""
  match option:
    case "1":
      print("1: Print arg")
      print_arg(second_arg)
    case _:
      print("Invalid option!")

# switch case implementation
switch_case(option)
endsnippet

snippet tt "Title" b
####################################################################################################
# $1
####################################################################################################
endsnippet

####################################################################################################
# FREECAD
####################################################################################################

snippet imfc "Import freecad module" b
import FreeCAD as App
endsnippet

snippet imp "Import part" b
import Part
endsnippet

snippet drcpt "Document recompute" b
doc.recompute()
endsnippet

snippet gawsk "Gui active workbench sketcher" b
Gui.activateWorkbench("SketcherWorkbench")
endsnippet

snippet gawp "Gui active workbench part" b
Gui.activateWorkbench("PartWorkbench")
endsnippet

snippet gawpd "Gui active workbench part design" b
Gui.activateWorkbench("PartDesignWorkbench")
endsnippet

snippet gawd "Gui active workbench draft" b
Gui.activateWorkbench("DraftWorkbench")
endsnippet

snippet gawa "Gui active workbench arch" b
Gui.activateWorkbench("ArchWorkbench")
endsnippet

snippet gawf "Gui active workbench fem" b
Gui.activateWorkbench("FemWorkbench")
endsnippet

snippet gawm "Gui active workbench mesh" b
Gui.activateWorkbench("MeshWorkbench")
endsnippet

snippet gawpa "Gui active workbench path" b
Gui.activateWorkbench("PathWorkbench")
endsnippet

snippet gawa4 "Gui active workbench assembly4" b
Gui.activateWorkbench("Assembly4Workbench")
endsnippet

snippet gawa4 "Gui active workbench A2 plus" b
Gui.activateWorkbench("A2plusWorkbench")
endsnippet

snippet gatdavvr "Test" b
Gui.activeDocument().activeView().viewRight()
endsnippet

snippet gatdavvl "Test" b
Gui.activeDocument().activeView().viewLeft()
endsnippet

snippet gatdavvt "Test" b
Gui.activeDocument().activeView().viewTop()
endsnippet

snippet gatdavvb "Test" b
Gui.activeDocument().activeView().viewBottom()
endsnippet

snippet gatdavvf "Test" b
Gui.activeDocument().activeView().viewFront()
endsnippet

snippet gatdavvB "Test" b
Gui.activeDocument().activeView().viewRear()
endsnippet

