snippet ukubectl "Kubectl Ubuntu" b
sudo apt update
sudo apt install curl
curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client

$1
endsnippet

snippet uk8s "K8s ubuntu" b
sudo apt-get update 

sudo apt-get install -y docker.io
sudo usermod –aG docker Ubuntu
newgrp docker
sudo chmod 777 /var/run/docker.sock

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

sudo tee /etc/apt/sources.list.d/kubernetes.list <<EOF
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

sudo apt-get update

sudo apt-get install -y kubelet kubeadm kubectl

sudo snap install kube-apiserver

$1
endsnippet

snippet umk8s "Ubuntu master k8s" b
sudo kubeadm init --pod-network-cidr=10.244.0.0/16
# in case your in root exit from it and run below commands
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

$1
endsnippet

snippet uprome "Ubuntu Prometheus" b
# Prometheus
sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.47.1/prometheus-2.47.1.linux-amd64.tar.gz
tar -xvf prometheus-2.47.1.linux-amd64.tar.gz
sudo mkdir -p /data /etc/prometheus
cd prometheus-2.47.1.linux-amd64/
sudo mv prometheus promtool /usr/local/bin/
udo mv consoles/ console_libraries/ /etc/prometheus/
sudo mv prometheus.yml /etc/prometheus/prometheus.yml
sudo chown -R prometheus:prometheus /etc/prometheus/ /data/
cd
rm -rf prometheus-2.47.1.linux-amd64.tar.gz
prometheus --version

cat << EOF | sudo tee -a /etc/systemd/system/prometheus.service
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=prometheus
Group=prometheus
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/prometheus \
  --config.file=/etc/prometheus/prometheus.yml \
  --storage.tsdb.path=/data \
  --web.console.templates=/etc/prometheus/consoles \
  --web.console.libraries=/etc/prometheus/console_libraries \
  --web.listen-address=0.0.0.0:9090 \
  --web.enable-lifecycle

[Install]
WantedBy=multi-user.target
EOF
sudo systemctl enable prometheus
sudo systemctl start prometheus

$1
endsnippet

snippet ugra "Ubuntu grafana" b
# Grafana
sudo apt-get install -y apt-transport-https software-properties-common
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
sudo apt-get update -y
sudo apt-get -y install grafana
sudo systemctl enable grafana-server
sudo systemctl start grafana-server

$1
endsnippet

snippet unex "Ubuntu node_exporter" 
# Node Exporter
sudo useradd \
    --system \
    --no-create-home \
    --shell /bin/false node_exporter
wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz
tar -xvf node_exporter-1.6.1.linux-amd64.tar.gz
sudo mv \
  node_exporter-1.6.1.linux-amd64/node_exporter \
  /usr/local/bin/
rm -rf node_exporter*
cat << EOF | sudo tee -a /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

StartLimitIntervalSec=500
StartLimitBurst=5

[Service]
User=node_exporter
Group=node_exporter
Type=simple
Restart=on-failure
RestartSec=5s
ExecStart=/usr/local/bin/node_exporter \
    --collector.logind

[Install]
WantedBy=multi-user.target

EOF
sudo systemctl enable node_exporter
sudo systemctl start node_exporter

cat << EOF | sudo tee -a /etc/prometheus/prometheus.yml
  - job_name: node_export
    static_configs:
          - targets: ["localhost:9100"]
EOF
promtool check config /etc/prometheus/prometheus.yml
curl -X POST http://localhost:9090/-/reload

$1
endsnippet


snippet cenjk "Centos jenkins" b
sudo yum update –y
sudo wget -O /etc/yum.repos.d/jenkins.repo \
    https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade -y
sudo dnf install java-17-amazon-corretto -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins
endsnippet

snippet ujk "Test" b
# Install Openjdk and Jenkins
sudo apt update -y
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
sudo apt update -y
sudo apt install temurin-17-jdk -y
/usr/bin/java --version
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install jenkins -y
sudo systemctl start jenkins

$1
endsnippet

snippet ujava "Test" b
# Install Java
sudo apt update -y
wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
sudo apt update -y
sudo apt install temurin-17-jdk -y

$1
endsnippet

snippet utv "Test" b
# install trivy
sudo apt-get install wget apt-transport-https gnupg lsb-release -y
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
sudo apt-get update
sudo apt-get install trivy -y

$1
endsnippet

snippet udk "Test" b
# Install Docker
sudo apt-get update
sudo apt-get install docker.io -y
sudo usermod -aG docker ubuntu
newgrp docker
sudo chmod 777 /var/run/docker.sock

$1
endsnippet

snippet usonar "Test" b
# Install Docker and Sonarqube
sudo apt-get update
sudo apt-get install docker.io -y
sudo usermod -aG docker ubuntu
newgrp docker
sudo chmod 777 /var/run/docker.sock
docker run -d --name sonar -p 9000:9000 sonarqube:lts-community

$1
endsnippet

snippet var "Variable" b
${1:CONTAINERD_VERSION}="${2:1.7.3}"
endsnippet



snippet s1 "Sed type 1" b
sudo sed -i 's/${1:firstString}/${2:secondString}/g' ${3:Path}
endsnippet

snippet s2 "Sed type 2" b
sed -i "1s/^/${1:String}/" ${2:Path}
endsnippet

snippet s3 "Sed type 3" b
sudo sed '/^${1:String}/d' ${2:Path}
endsnippet

snippet s4 "Sed type 4" b
cat << EOF | sudo tee -a ${1:Path}
${2:Content}
EOF
endsnippet

snippet hn "Set hostname" b
hostnamectl set-hostname ${1:Sonarqube}
endsnippet

snippet ex "Export" b
export ${1:VER}="${2:0.40.2}"
endsnippet

snippet r "Echo and Read" b
echo "$1"
read $2
$3
endsnippet

snippet rr "Read without default" b
read -p "$1 [$2]: " $3
$4
endsnippet

snippet rd "Read with default" b
read -p "$1 [$2]: " $3
$3=${$3:-$2}
$4
endsnippet

snippet s "Test" b
#!/bin/bash

$1
endsnippet

snippet ec "Echo" b
echo "${1:Content}"
$2
endsnippet

snippet nd "Test" b
if [ ! -d ${1:folderPath} ]
then
	${2:mkdir}	
fi

$3
endsnippet
snippet d "Test" b
if [ -d ${1:folderPath} ]
then
	${2:mkdir}	
fi

$3
endsnippet
snippet nf "Test" b
if [ ! -f ${1:filePath} ]
then
	${2:mkdir}	
fi

$3
endsnippet
snippet f "Test" b
if [ -f ${1:filePath} ]
then
	${2:mkdir}	
fi

$3
endsnippet
