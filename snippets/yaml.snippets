## Ansible
snippet hv "Ansible host variables" b
$1=$2 
endsnippet

snippet av "Ansible variables" b
{{ ${1:Content} }}
endsnippet

snippet l1 "Line in file" b
lineinfile:
  path: $1
  regexp: $2
  line: $3
endsnippet

snippet r1 "Ansible register" b
register: $1
endsnippet
snippet r2 "Ansible roles" b
roles:
  - $1
endsnippet

snippet n1 "Ansible notify" b
notify: ${1:restart_apache}
endsnippet

snippet s1 "Ansible service" b
service:
  name: ${1:docker}
  state: ${2:started}
$3
endsnippet

snippet s2 "Ansible service with enable" b
service:
  name: ${1:docker}
  state: ${2:started}
  enabled: ${3:true}
$4
endsnippet

snippet c1 "Ansible copy" b
copy:
  src: $1
  dest: $2
  owner: $3
  group: $4
  mode: $5
endsnippet
snippet c2 "Ansible change when" b
chnaged_when: ${1:false}
endsnippet

snippet u1 "Ansible unarchive" b
unarchive:
  src: $1
  dest: $2
  remote_src: $3
  owner: $4
  group: $5
  mode: $6
endsnippet

snippet u2 "Ansible user" b
user:
  name: $1
  group: $2
endsnippet

snippet k1 "Ansible authorized_key" b
authorized_key:
  user: $1
  key: "$2"
endsnippet


snippet t1 "Ansible tags" b
tags: ${1:ubuntu,centos}
endsnippet

snippet fpl "First playbook" b
---

- hosts: ${1:all}
  become: ${2:true}
  ${3:tasks}:

  - name: ${4:Name}
    ${5:yum}
      name: ${6:tmux}
    $7
  $8
$9
endsnippet

snippet pl "Playbook" b
- hosts: ${1:all}
  become: ${2:true}
  ${3:tasks}:

  - name: ${4:Name}
    ${5:yum}
      name: ${6:tmux}
    $7
  $8
endsnippet

snippet ts "Ansible task" b
- name: ${1:Name}
  ${2:yum}
    name: ${3:docker}
  $4
$5
endsnippet

snippet w1 "Ansible when condition" b
when: ${1:ansible_distribution} ${2:==} ${3:"Ubuntu"}
$4
endsnippet

## K8S

## POD
snippet pod "K8s normal pod" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:containerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
endsnippet

snippet pod2 "Test" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:containerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
    volumeMounts:
    - name: ${5:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      mountPath: ${6:mountPath(container)}
      ${7:ReadOnly}: ${8:true}
volumes: # define volumes
  - name: $5 # name of the volumes
    ${9:emptyDir}: ${10:{}} # define type is emptyDir
endsnippet

snippet pod3 "K8s pod with env and mount" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:containerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
    volumeMounts:
    - name: ${5:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      mountPath: ${6:mountPath(container)}
      ${7:ReadOnly}: ${8:true}
      env: # pass env to container
        - name: ${9:PORT} # env name
          value: ${10:"5000"} # env value
volumes: # define volumes
  - name: $5 # name of the volumes
    ${11:emptyDir}: ${12:{}} # define type is emptyDir
endsnippet
## SET
snippet rc "K8s normal replication" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue} # label value
    spec:
      containers:
      - image: ${7:image} # image used to run container
        name: ${8:containerName} # name of the container
        ports:
          - containerPort: ${9:8080} # pod of the container
endsnippet

snippet rc2 "k8s replication with mount" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue} # label value
    spec:
      containers:
      - image: ${7:image} # image used to run container
        name: ${8:containerName} # name of the container
        ports:
          - containerPort: ${9:8080} # pod of the container
    	volumeMounts:
    	- name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${12:ReadOnly}: ${13:true}
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet rc3 "k8s replication with env and mount" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue} # label value
    spec:
      containers:
      - image: ${7:image} # image used to run container
        name: ${8:containerName} # name of the container
        ports:
          - containerPort: ${9:8080} # pod of the container
    	volumeMounts:
    	- name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${12:ReadOnly}: ${13:true}
      	env: # pass env to container
        - name: ${14:PORT} # env name
          value: ${15:"5000"} # env value
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet rs "k8s normal replicaSet" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
endsnippet

snippet rs2 "k8s replicaSet with mount" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
    	volumeMounts:
    	- name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${12:ReadOnly}: ${13:true}
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${14:emptyDir}: ${15:{}} # define type is emptyDir
endsnippet

snippet rs3 "k8s replicaSet with env and mount" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
    	volumeMounts:
    	- name: ${12:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${13:mountPath(container)}
      	${14:ReadOnly}: ${15:true}
      	env: # pass env to container
        - name: ${16:PORT} # env name
          value: ${17:"5000"} # env value
    volumes: # define volumes
  	- name: $12 # name of the volumes
    	${18:emptyDir}: ${19:{}} # define type is emptyDir
endsnippet

snippet dms "k8s normal daemonSet" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
      	env: # pass env to container
        - name: ${10:PORT} # env name
          value: ${11:"5000"} # env value
endsnippet

snippet dms2 "k8s daemonSet with mount" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
      volumeMounts:
      - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
        mountPath: ${11:mountPath(container)}
        ${12:ReadOnly}: ${13:true}
     volumes: # define volumes
    - name: $10 # name of the volumes
      ${14:emptyDir}: ${15:{}} # define type is emptyDir
endsnippet
	
snippet dms3 "k8s daemonSet with env and mount" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
      volumeMounts:
      - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
        mountPath: ${11:mountPath(container)}
        ${12:ReadOnly}: ${13:true}
        env: # pass env to container
         - name: ${14:PORT} # env name
           value: ${15:"5000"} # env value
     volumes: # define volumes
    - name: $10 # name of the volumes
      ${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet dpl "k8s normal deployment" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate} # you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
endsnippet

snippet dpl2 "k8s normal deployment with mount" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate} # you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
    	volumeMounts:
    	- name: ${11:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${12:mountPath(container)}
      	${13:ReadOnly}: ${14:true}
    volumes: # define volumes
  	- name: $11 # name of the volumes
    	${15:emptyDir}: ${16:{}} # define type is emptyDir
endsnippet

snippet dpl3 "k8s normal deployment with env and mount" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate} # you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
    	volumeMounts:
    	- name: ${11:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${12:mountPath(container)}
      	${13:ReadOnly}: ${14:true}
      	env: # pass env to container
        - name: ${15:PORT} # env name
          value: ${16:"5000"} # env value
    volumes: # define volumes
  	- name: $11 # name of the volumes
    	${17:emptyDir}: ${18:{}} # define type is emptyDir
endsnippet

snippet sts "k8s normal statefulSet" b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:statefulSetName}
spec:
  serviceName: ${2:serverName}# the name of service
  replicas: ${3:amount}
  template: # pod template
    metadata:
      labels:
        ${4:podLabelName}: ${5:podLabelValue}
    spec:
      containers:
        - name: ${6:containerName}
          image: ${7:containerImage}
          ports:
            - name: ${8:http}
              containerPort: ${9:8080}
endsnippet

snippet sts2 "k8s normal statefulSet with mount" b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:statefulSetName}
spec:
  serviceName: ${2:serverName}# the name of service
  replicas: ${3:amount}
  template: # pod template
    metadata:
      labels:
        ${4:podLabelName}: ${5:podLabelValue}
    spec:
      containers:
        - name: ${6:containerName}
          image: ${7:containerImage}
          ports:
            - name: ${8:http}
              containerPort: ${9:8080}
    	  volumeMounts:
    	  - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	  mountPath: ${11:mountPath(container)}
      	  ${12:ReadOnly}: ${13:true}
      volumes: # define volumes
  	  - name: $10 # name of the volumes
    	  ${14:emptyDir}: ${15:{}} # define type is emptyDir
endsnippet

snippet sts3 "k8s normal statefulSet with env and mount" b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:statefulSetName}
spec:
  serviceName: ${2:serverName}# the name of service
  replicas: ${3:amount}
  template: # pod template
    metadata:
      labels:
        ${4:podLabelName}: ${5:podLabelValue}
    spec:
      containers:
        - name: ${6:containerName}
          image: ${7:containerImage}
          ports:
            - name: ${8:http}
              containerPort: ${9:8080}
    	  volumeMounts:
    	  - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	  mountPath: ${11:mountPath(container)}
      	  ${12:ReadOnly}: ${13:true}
      	  env: # pass env to container
          - name: ${14:PORT} # env name
            value: ${15:"5000"} # env value
      volumes: # define volumes
  	  - name: $10 # name of the volumes
    	  ${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

## SERVICE
snippet svc "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:Name}
spec:
  selector:
      ${2:app} : ${3:myAppName}
  ports:
    - protocol: ${4:protocol}
      port: ${5:Port}
      targetPort: ${6:targetPort}
endsnippet

snippet svc2 "k8s svc nodeport" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:Name}
spec:
  type: NodePort
  selector:
      ${2:app} : ${3:myAppName}
  ports:
    - protocol: ${4:TCP}
      port: ${5:80}
      targetPort: ${6:8080}
      nodePort: ${7:31000}
endsnippet

snippet svc3 "k8s svc loadbalancer" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:serverName}
spec:
  selector:
    ${2:podLabelName}: ${3:podLabelNameValue}
  type: LoadBalancer
  ports:
    - protocol: ${4:TCP}
      port: ${5:80}
      targetPort: ${6:8080}
endsnippet

snippet in "k8s ingress" b
piVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${1:myIngressName}
spec:
  rules:
    - host: ${2:replicaSet.example.com} # domain name
  http:
    paths:
      - path: ${3:/}
        backend:
          serviceName: ${4:serviceName} # name of the service inside cluster
          servicePort: ${5:serverPort}
endsnippet

snippet gce "Test" b
- name: ${1:htlm}
  gcePersistentDisk: # google cloud disk volume
    pdName: ${2:persistentVolumeName} # name of the persistent disk on google cloud
    fsType: ext4
endsnippet

snippet aws "k8s aws volume inside resources" b
- name: ${1:html}
  awsElasticBlockStore: # amazon web service volume
    volumeID: ${2:volumeID} # volume of the aws ebs
    fsType: ext4
endsnippet

snippet map "Test" b
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:configMapName}
data:
  ${2:DB}: ${3:postgre}
endsnippet

snippet nw "k8s network policy" b
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ${1:networkPolicyName}
spec:
  podSelector:
    matchLabels:
      ${2:podLabelName}: ${3:podLabelValue} # Adjust the label to match the pods you want to allow
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - ipBlock:
          cidr: ${4:10.0.0.0/16}
      - podSelector:
          matchLabels:
            ${5:role}: ${6:database} # Adjust the label to match the allowed pods
  egress:
    - to:
      - ipBlock:
          cidr: ${7:10.0.0.0/16}
      - podSelector:
          matchLabels:
            ${8:role}: ${9:database} # Adjust the label to match the allowed pods
endsnippet

snippet sc "k8s secret" b
apiVersion: v1
kind: Secret
metadata:
  name: ${1:my-secret}
type: Opaque
data:
  ${2:username}: ${3:<base64-encoded-username>}
endsnippet

snippet sc2 "k8s secret basic auth" b
apiVersion: v1
kind: Secret
metadata:
  name: ${1:my-basic-auth-secret}
type: kubernetes.io/basic-auth
data:
  ${2:username}: ${3:<base64-encoded-username>}
endsnippet

snippet sc3 "k8s secret docker registry" b
apiVersion: v1
kind: Secret
metadata:
  name: ${1:my-docker-secret}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ${2:<base64-encoded-docker-config>}
endsnippet

snippet sc4 "k8s secret tls cert" b
apiVersion: v1
kind: Secret
metadata:
  name: ${1:my-tls-secret}
type: kubernetes.io/tls
data:
  tls.crt: ${2:<base64-encoded-certificate>}
  tls.key: ${3:<base64-encoded-private-key>}
endsnippet

snippet stc "k8s storage class" b
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ${1:my-storage-class}
provisioner: kubernetes.io/${2:aws-ebs} # aws-ebs | gcp-pd | rbd | azure-disk | azure-file | portworx-volume | vsphere-volume | no-provisioner
parameters: # type | fsType | encrypted | iopsPerGB | zones | replication-tye 
  type: ${3:gp2} # io1 | io2 | gp2 | gp3
  fsType: ${4:ext4}
  encrypted: "${5:true}"  
  iopsPerGB: "${6:10}"   
  zones: ${7:ap-northeast-1a} # Can use multi zone seperate by comma
  replication-type: none 
reclaimPolicy: ${8:Delete} # Delete | Retain | Snapshot
allowVolumeExpansion: ${9:false} # true or false
mountOption:
  - debug
volumeBindingMode: ${10:WaitForFirstConsumer} # WaitForFirstConsumer | Immediate
endsnippet

snippet cfg "k8s configmap" b
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:my-configmap}
data:
  ${2:key1}: ${3:value1}
endsnippet

snippet cfg2 "k8s configmap 3" b
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:my-configmap-files}
data:
  ${2:special-key}: |-
    ${3:key1}=${4:value1}
endsnippet

snippet cfg3 "k8s configmap 3" b
piVersion: v1
kind: ConfigMap
metadata:
  name: ${1:my-configmap-binary}
data:
  binary-data: ${2:<base64-encoded-binary-content>}
endsnippet

snippet cfg4 "k8s configmap 4" b
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:my-configmap-yaml}
data:
  ${2:config.yaml}: |
    ${3:key1}: ${4:value1}
endsnippet

snippet pv "k8s persistence volume" b
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${1:my-pv}
spec:
  capacity:
    storage: ${2:1Gi}
  accessModes:
    - ${3:ReadWriteOnce} # ReadWriteOnce | ReadOnlyMany | ReadWriteMany
  persistentVolumeReclaimPolicy: ${4:Retain} # Retain | Delete | Snapshot
  storageClassName: ${5:my-storage-class}
  hostPath:
    path: ${6:/path/on/host}
endsnippet

snippet hpa "k8s HPA" b
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: ${1:my-hpa}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: ${2:Deployment} # Pod | ReplicationSet ,...
    name: ${3:my-deployment}
  minReplicas: ${4:2}
  maxReplicas: ${5:5}
  metrics:
    - type: Resource
      resource:
        name: ${6:cpu}
        targetAverageUtilization: ${7:80}
    - type: Resource
      resource:
        name: ${7:memory}
        targetAverageValue: ${8:200Mi}
endsnippet

snippet ns "K8s namespace" b
apiVersion: v1
kind: Namespace
metadata:
  name: ${1:my-namespace}
endsnippet

snippet jb "k8s job" b
apiVersion: batch/v1
kind: Job
metadata:
  name: ${1:my-job}
spec:
  template:
    metadata:
      name: ${2:my-pod}
    spec:
      containers:
      - name: ${3:my-container}
        image: ${4:my-image:latest}
  backoffLimit: ${5:3}
endsnippet

snippet cjb "k8s cronjob" b
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ${1:my-cronjob}
spec:
  schedule: "${2:*/5 * * * *}"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            ${3:app}: ${4:my-cronjob}
        spec:
          containers:
          - name: ${5:my-container}
            image: ${6:my-image:latest}
  successfulJobsHistoryLimit: ${7:3}
  failedJobsHistoryLimit: ${8:1}
endsnippet

snippet rl "Role" b
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ${1:my-role}
  namespace: ${2:my-namespace}
rules:
- apiGroups: ["${3:my-group}"]
  resources: ["${4:pods}"]
  verbs: [${5:"get"}] # get | list | watch | create | update | patch | delete
endsnippet

snippet rlb "RoleBinding" b
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${1:my-role-binding}
  namespace: ${2:my-namespace}
subjects:
- kind: ${3:ServiceAccount}
  name: ${4:default}
  namespace: ${5:my-namespace}
roleRef:
  kind: ${6:Role}
  name: ${7:my-role}
  apiGroup: rbac.authorization.k8s.io
endsnippet

snippet clr "k8s clusterRole" b
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ${3:my-cluster-role}
rules:
- apiGroups: ["${2:my-group}"]
  resources: ["${3:pods}"]
  verbs: [${5:"get"}] # get | list | watch | create | update | patch | delete
- apiGroups: ["${6:my-group}"]
  resources: ["${7:deployments}"]
  verbs: [${5:"get"}] # get | list | watch | create | update | patch | delete
endsnippet

snippet clrb "k8s clusterRoleBinding" b
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${1:my-cluster-role-binding}
subjects:
- kind: ${2:ServiceAccount}
  name: ${3:default}
  namespace: ${4:default}
roleRef:
  kind: ${5:ClusterRole}
  name: ${6:my-cluster-role}
  apiGroup: rbac.authorization.k8s.io
endsnippet

snippet pv "Test" b
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${1:my-pvc}
spec:
  capacity:
    storage: ${2:5Gi}
  volumeMode: ${3:Filesystem}
  accessModes:
    - ${4:ReadWriteOnce} # ReadWriteOnce | ReadOnlyMany | ReadWriteMany
  persistentVolumeReclaimPolicy: ${5:Recycle}
  storageClassName: ${6:myStorageClass} 
endsnippet

snippet pvc "k8s pvc" b
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${1:my-pvc}
spec:
  accessModes:
    - ${2:ReadWriteOnce} # ReadWriteOnce | ReadOnlyMany | ReadWriteMany
  storageClassName: ${3:my-storage-class}
  resources:
    requests:
      storage: ${4:5Gi}
endsnippet

snippet argocd "k8s argocd" b
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ${1:argocd-app}
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/${2:haquocdat543}/${3:devops-argocd}.git 
    targetRevision: ${4:HEAD}
    path: ${5:resources}
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  syncPolicy:
    syncOptions:
      - CreateNamespace = ${6:true}
    automated:
      selfHeal: ${7:true}
      prune:    ${8:true}
endsnippet

snippet argoro "k8s argo rollout" b
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: ${1:bluegreen-demo}
  labels:
    app: ${2:bluegreen-demo}
spec:
  replicas: ${3:2}
  revisionHistoryLimit: ${4:1}
  selector:
    matchLabels:
      app: ${4:bluegreen-demo}
  template:
    metadata:
      labels:
        app: ${5:bluegreen-demo}
    spec:
      containers:
        - name: ${6:bluegreen-demo}
          image: ${7:argoproj/rollouts-demo:green}
          imagePullPolicy: ${8:Always}
          ports:
            - name: ${9:http}
              protocol: ${10:TCP}
              containerPort: ${11:8080}
  strategy:
    blueGreen:
      autoPromotionEnabled: ${12:false}
      activeService: ${13:bluegreen-demo}
      previewService: ${14:bluegreen-demo-preview}
endsnippet

snippet env "K8s Env" b
env: # pass env to container
  - name: ${1:PORT} # env name
    value: ${2:"5000"} # env value
endsnippet

snippet v2 "Container env variable" b
- name: ${1:PORT} # env name
  value: ${2:"5000"} # env value
endsnippet

snippet v3 "Svc port" b
- protocol: ${1:TCP}
  port: ${2:80}
  targetPort: ${3:8080}
endsnippet

snippet v4 "Nodeport port" b
- protocol: ${1:TCP}
  port: ${2:80}
  targetPort: ${3:8080}
  nodePort: ${4:31000}
endsnippet

snippet v5 "Secret variable" b
${1:password}: ${2:<base64-encoded-password>}
endsnippet

snippet v6 "node Selector" b
nodeSelector:
    ${1:disktype}: ${2:ssd}
endsnippet

snippet tol "k8s toleration" b
tolerations:
  - key: ${1:node-type}
    Operator: ${2:Equal}
    value: ${3:production}
    effect: ${4:NoSchedule} # NoSchedule | PreferNoSchedule | NoExecute
endsnippet

snippet naff "k8s node Affinity" b
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
          - ${1:key}: ${2:disktype}
            operator: ${3:In}
            values:
              - "${4:ssd}"
endsnippet

snippet paff "k8s pod affinity" b
affinity:
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
            matchLabels:
              ${1:app}: ${2:database}
endsnippet

snippet imgsc "ImageSecretPull" b
imagePullSecrets:
- name: ${1:my-registry-key}
endsnippet

snippet vol "k8s volume inside resources" b
volumes:
  - name: ${1:my-persistent-storage}
    persistentVolumeClaim:
      claimName: ${1:my-pvc}
endsnippet

snippet vol2 "k8s volume EmptyDir" b
- name: ${1:html}
  emptyDir: ${2:{}}
endsnippet

snippet vol3 "k8s volume hostPath" b
- name: ${1:log}
  hostPath: 
    path: ${2:/var/log}
endsnippet

snippet vol4 "k8s volume gitRepo" b
- name: ${1:html}
  gitRepo: 
    repository: https://github.com/${2:luksa}/${3:kubia-website-example}.git 
    revision: ${4:master }
    directory: ${5:.}
endsnippet

snippet vol5 "k8s volume ConfigMap" b
- name: ${1:config}
  configMap:
    name: ${2:nginx-config}
endsnippet

snippet vlm "k8s volume mount" b
volumeMounts:
    - name: ${1:mongodb-data}
      mountPath: ${2:/data/db}
endsnippet

snippet vm "k8s volume mount" b
- name: ${1:mongodb-data}
  mountPath: ${2:/data/db}
endsnippet

snippet vm1 "k8s readOnly" b
${1:ReadOnly}: ${2:true}
endsnippet

snippet meshgw "k8s consul mesh gateway" b
piVersion: consul.hashicorp.com/v1alpha1
kind: Mesh
metadata:
  name: ${1:mesh}
spec:
  peering:
    peerThroughMeshGateways: ${2:true}
endsnippet

snippet expsvc "k8s consul exported service" b
apiVersion: consul.hashicorp.com/v1alpha1
kind: ExportedServices
metadata:
  name: ${1:default }
spec:
  services:
    - name: "${2:shippingservice}" 
      consumers:
      - peer: ${3:eks }
endsnippet

snippet svcin "k8s consul service intention" b
apiVersion: consul.hashicorp.com/v1alpha1
kind: ServiceIntentions
metadata:
  name: ${1:shipping-allow-eks}
spec:
  destination:
    name: ${2:shippingservice}
  sources:
   - name: ${3:frontendxx} # name of service within eks sending traffic to frontend
     action: ${4:allow}
     peer: ${5:eks}
endsnippet

snippet svcre "k8s consul service resolver" b
apiVersion: consul.hashicorp.com/v1alpha1
kind: ServiceResolver
metadata:
  name: ${1:shippingservice}
spec:
  connectTimeout: ${2:15s}
  failover:
    '*':
      targets:
        - peer: '${3:lke}'
endsnippet

snippet consul "k8s consul file" b
global:
  image: "hashicorp/consul:1.14.0"
  peering:
    enabled: ${1:true}
  tls:
    enabled: ${2:true}

server:
  replicas: ${3:1}
  bootstrapExpect: ${4:1}
  extraConfig: |
    {
      "log_level": "TRACE"
    }

connectInject:
  enabled: ${5:true}
  default: ${6:true}

meshGateway:
  enabled: ${7:true}
  replicas: ${8:1}

controller:
  enabled: ${9:true}

ui:
  enabled: ${10:true}
  service:
    enabled: ${11:true}
    type: ${12:LoadBalancer}
endsnippet

snippet hredis "k8s redis with helm" b
master:
  password: "${1:integration}"
  resources:
    requests:
      memory: "${2:1Gi}"
      cpu: "${3:500m}"
    limits:
      memory: "${4:1Gi}"
      cpu: "${5:500m}"
persistence:
  enabled: true

pdb:
  create: true
  minAvailable: ${6:1}
  maxUnavailable: "$7"

architecture: ${8:standalone}

metrics:
  enabled: ${9:true}
  service:
    type: ${10:Loadbalancer}
endsnippet

snippet 3 "Separation" b
___
endsnippet

### DOCKER

### AWS
snippet bs "Buildspec.yml" b
version: 0.2

phases:
  install:
    commands:
      - $1
  pre_build:
    commands:
      - $2
  build:
    commands:
      - $3
  post_build:
    commands:
      - $4
artifacts:
  files:
    - $5
endsnippet


