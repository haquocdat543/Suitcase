## K8S
## POD
snippet pod "Test" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:eontainerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
    volumeMounts:
    - name: ${5:volumeName}# The volume called html is mounted at /usr/share/nginx/html in the container
      mountPath: ${6:mountPath(container)}
      ${1:ReadOnly}: ${7:true}
volumes: # define volumes
  - name: $5 # name of the volumes
    ${8:emptyDir}: ${1:{}}# define type is emptyDir
endsnippet
## SET
snippet rc "Test" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}# label value
    spec:
      containers:
      - image: ${7:image}# image used to run container
        name: ${8:containerName}# name of the container
        ports:
          - containerPort: ${9:8080}# pod of the container
    	volumeMounts:
    	- name: ${10:volumeName}# The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${1:ReadOnly}: ${12:true}
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${13:emptyDir}: ${14:{}}# define type is emptyDir
endsnippet
snippet rs "Test" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
endsnippet
snippet dms "Test" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
endsnippet
snippet dpl "Test" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate}# you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
endsnippet
## SERVICE
snippet svc "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:Name}
spec:
  selector:
      ${2:app} : ${3:myAppName}
  ports:
    - protocol: ${4:protocol}
      port: ${5:Port}
      targetPort: ${6:targetPort}
endsnippet
snippet np "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:Name}
spec:
  type: NodePort
  selector:
      ${2:app} : ${3:myAppName}
  ports:
    - protocol: ${4:TCP}
      port: ${5:80}
      targetPort: ${6:8080}
      nodePort: ${7:31000}
endsnippet
snippet lb "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:serverName}
spec:
  selector:
    ${1:podLabelName}: ${1:podLabelNameValue}
  type: LoadBalancer
  ports:
    - protocol: ${4:TCP}
      port: ${1:80}
      targetPort: ${1:8080}
endsnippet
snippet in "Test" b
piVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${1:myIngressName}
spec:
  rules:
    - host: ${2:replicaSet.example.com}# domain name
  http:
    paths:
      - path: ${3:/}
        backend:
          serviceName: ${4:serviceName}# name of the service inside cluster
          servicePort: ${5:serverPort}
endsnippet
snippet pv "Test" b
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${1:my-pvc}
spec:
  capacity:
    storage: ${2:5Gi}
  volumeMode: ${3:Filesystem}
  accessModes:
    - ${4:ReadWriteOnce}
  persistentVolumeReclaimPolicy: ${5:Recycle}
  storageClassName: ${6:myStorageClass} 
endsnippet
snippet emptyDir "Test" b
      volumeMounts:
        - name: ${1:volueName}# The volume called html is mounted at /usr/share/nginx/html in the container
          mountPath:${2:mountPath(container)} 
          ${3:ReadOnly}: ${4:true}
  volumes: # define volumes
    - name: $2 name of the volumes
      ${6:emptyDir}: ${7:{}}# define type is emptyDir
endsnippet
snippet hostPath "Test" b
      volumeMounts:
        - name: ${1:volueName}# The volume called html is mounted at /usr/share/nginx/html in the container
          mountPath:${2:mountPath(container)} 
          ${3:ReadOnly}: ${4:true}
  volumes: # define volumes
    - name: $2 name of the volumes
      hostPath: # hostPath volume
      	${6:path}: ${7:path}# define type is emptyDir
endsnippet
