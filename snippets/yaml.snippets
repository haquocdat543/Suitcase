## Ansible
snippet hv "Ansible host variables" b
$1=$2 
endsnippet

snippet av "Ansible variables" b
{{ ${1:Content} }}
endsnippet

snippet l1 "Line in file" b
lineinfile:
  path: $1
  regexp: $2
  line: $3
endsnippet

snippet r1 "Ansible register" b
register: $1
endsnippet
snippet r2 "Ansible roles" b
roles:
  - $1
endsnippet

snippet n1 "Ansible notify" b
notify: ${1:restart_apache}
endsnippet

snippet s1 "Ansible service" b
service:
  name: ${1:docker}
  state: ${2:started}
$3
endsnippet

snippet s2 "Ansible service with enable" b
service:
  name: ${1:docker}
  state: ${2:started}
  enabled: ${3:true}
$4
endsnippet

snippet c1 "Ansible copy" b
copy:
  src: $1
  dest: $2
  owner: $3
  group: $4
  mode: $5
endsnippet
snippet c2 "Ansible change when" b
chnaged_when: ${1:false}
endsnippet

snippet u1 "Ansible unarchive" b
unarchive:
  src: $1
  dest: $2
  remote_src: $3
  owner: $4
  group: $5
  mode: $6
endsnippet

snippet u2 "Ansible user" b
user:
  name: $1
  group: $2
endsnippet

snippet k1 "Ansible authorized_key" b
authorized_key:
  user: $1
  key: "$2"
endsnippet


snippet t1 "Ansible tags" b
tags: ${1:ubuntu,centos}
endsnippet

snippet fpl "First playbook" b
---

- hosts: ${1:all}
  become: ${2:true}
  ${3:tasks}:

  - name: ${4:Name}
    ${5:yum}
      name: ${6:tmux}
    $7
  $8
$9
endsnippet

snippet pl "Playbook" b
- hosts: ${1:all}
  become: ${2:true}
  ${3:tasks}:

  - name: ${4:Name}
    ${5:yum}
      name: ${6:tmux}
    $7
  $8
endsnippet

snippet ts "Ansible task" b
- name: ${1:Name}
  ${2:yum}
    name: ${3:docker}
  $4
$5
endsnippet

snippet w1 "Ansible when condition" b
when: ${1:ansible_distribution} ${2:==} ${3:"Ubuntu"}
$4
endsnippet

## K8S

## POD
snippet pod "K8s normal pod" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:containerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
endsnippet

snippet pod2 "Test" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:containerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
    volumeMounts:
    - name: ${5:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      mountPath: ${6:mountPath(container)}
      ${7:ReadOnly}: ${8:true}
volumes: # define volumes
  - name: $5 # name of the volumes
    ${9:emptyDir}: ${10:{}} # define type is emptyDir
endsnippet

snippet pod3 "K8s pod with env and mount" b
apiVersion: v1
kind: Pod
metadata:
  name: ${1:podName}
spec:
  containers:
  - name: ${2:containerName}
    image: ${3:image}
    ports:
    - containerPort: ${4:Port}
    volumeMounts:
    - name: ${5:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      mountPath: ${6:mountPath(container)}
      ${7:ReadOnly}: ${8:true}
      env: # pass env to container
        - name: #${9:PORT} env name
          value: ${10:"5000"} # env value
volumes: # define volumes
  - name: $5 # name of the volumes
    ${11:emptyDir}: ${12:{}} # define type is emptyDir
endsnippet
## SET
snippet rc "K8s normal replication" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue} # label value
    spec:
      containers:
      - image: ${7:image} # image used to run container
        name: ${8:containerName} # name of the container
        ports:
          - containerPort: ${9:8080} # pod of the container
endsnippet

snippet rc2 "k8s replication with mount" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue} # label value
    spec:
      containers:
      - image: ${7:image} # image used to run container
        name: ${8:containerName} # name of the container
        ports:
          - containerPort: ${9:8080} # pod of the container
    	volumeMounts:
    	- name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${12:ReadOnly}: ${13:true}
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet rc3 "k8s replication with env and mount" b
apiVersion: v1
kind: ReplicationController
metadata:
  name: ${1:my-rc}
spec:
  replicas:  ${2:3} # number of the pod
  selector: # The pod selector determining what pods the RC is operating on
    ${3:app}: ${4:appName} #label value
  template: # pod template
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue} # label value
    spec:
      containers:
      - image: ${7:image} # image used to run container
        name: ${8:containerName} # name of the container
        ports:
          - containerPort: ${9:8080} # pod of the container
    	volumeMounts:
    	- name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${12:ReadOnly}: ${13:true}
      	env: # pass env to container
        - name: #${14:PORT} env name
          value: ${15:"5000"} # env value
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet rs "k8s normal replicaSet" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
endsnippet

snippet rs2 "k8s replicaSet with mount" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
    	volumeMounts:
    	- name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${11:mountPath(container)}
      	${12:ReadOnly}: ${13:true}
      	env: # pass env to container
        - name: #${14:PORT} env name
          value: ${15:"5000"} # env value
    volumes: # define volumes
  	- name: $10 # name of the volumes
    	${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet rs "k8s replicaSet with env and mount" b
apiVersion: apps/v1 # change version API
kind: ReplicaSet # change resource name
metadata:
  name: ${1:myReplicaSet}
spec:
  replicas: ${2:amount}
  selector:
    matchLabels: # change here 
      ${3:app}: ${4:appName}
  template:
    metadata:
      labels:
        ${5:podLabel}: ${6:podLabelValue}
    spec:
      containers:
      - image: ${7:imageName}
        name:${8:containerName} 
        ports:
          - containerPort: ${9:8080}
      	env: # pass env to container
        - name: #${10:PORT} env name
          value: ${11:"5000"} # env value
    	volumeMounts:
    	- name: ${12:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${13:mountPath(container)}
      	${14:ReadOnly}: ${14:true}
      	env: # pass env to container
        - name: #${16:PORT} env name
          value: ${17:"5000"} # env value
    volumes: # define volumes
  	- name: $18 # name of the volumes
    	${19:emptyDir}: ${20:{}} # define type is emptyDir
endsnippet

snippet dms "k8s normal daemonSet" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
      	env: # pass env to container
        - name: #${10:PORT} env name
          value: ${11:"5000"} # env value
endsnippet

snippet dms2 "k8s daemonSet with mount" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
      volumeMounts:
      - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
        mountPath: ${11:mountPath(container)}
        ${12:ReadOnly}: ${13:true}
     volumes: # define volumes
    - name: $10 # name of the volumes
      ${14:emptyDir}: ${15:{}} # define type is emptyDir
endsnippet
	
snippet dms3 "k8s daemonSet with env and mount" b
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ${1:myDaemonSet}
spec:
  selector:
    matchLabels:
      ${2:daemonSetLabel}: ${3:daemonSetLabelValue}
  template:
    metadata:
      labels:
        ${4:podLabel}: ${5:podLabelValue}
    spec:
      nodeSelector:
        ${6:nodeLabelName}: ${7:nodeLabelNameValue} 
      containers:
        - name: ${8:containerName}
          image: ${9:containerImage}
      volumeMounts:
      - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
        mountPath: ${11:mountPath(container)}
        ${12:ReadOnly}: ${13:true}
        env: # pass env to container
         - name: #${14:PORT} env name
           value: ${15:"5000"} # env value
     volumes: # define volumes
    - name: $10 # name of the volumes
      ${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

snippet dpl "k8s normal deployment" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate} # you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
      	env: # pass env to container
        - name: #${11:PORT} env name
          value: ${12:"5000"} # env value
endsnippet

snippet dpl2 "k8s normal deployment with mount" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate} # you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
    	volumeMounts:
    	- name: ${11:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${12:mountPath(container)}
      	${13:ReadOnly}: ${14:true}
    volumes: # define volumes
  	- name: $11 # name of the volumes
    	${15:emptyDir}: ${16:{}} # define type is emptyDir
endsnippet

snippet dpl3 "k8s normal deployment with env and mount" b
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${1:deployName}
  labels:
    app: ${2:deployAppName}
spec:
  revisionHistoryLimit: ${3:1}
  strategy: # change here
    type: ${4:RollingUpdate} # you can choose Recreate instead of RollingUpdate
  replicas: ${5:amountOfReplica}
  selector:
    matchLabels:
      app: ${6:matchePodLabels}
  template:
    metadata:
      labels:
        app: ${7:podLabels}
    spec:
      containers:
      - name: ${8:containerName}
        image: ${9:image}
        ports:
        - containerPort: ${10:containerPort}
      	env: # pass env to container
        - name: #${11:PORT} env name
          value: ${12:"5000"} # env value
    	volumeMounts:
    	- name: ${13:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	mountPath: ${14:mountPath(container)}
      	${15:ReadOnly}: ${16:true}
      	env: # pass env to container
        - name: #${17:PORT} env name
          value: ${18:"5000"} # env value
    volumes: # define volumes
  	- name: $13 # name of the volumes
    	${19:emptyDir}: ${20:{}} # define type is emptyDir
endsnippet

snippet sts "k8s normal statefulSet" b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:statefulSetName}
spec:
  serviceName: ${2:serverName}# the name of service
  replicas: ${3:amount}
  template: # pod template
    metadata:
      labels:
        ${4:podLabelName}: ${5:podLabelValue}
    spec:
      containers:
        - name: ${6:containerName}
          image: ${7:containerImage}
          ports:
            - name: ${8:http}
              containerPort: ${9:8080}
endsnippet

snippet sts2 "k8s normal statefulSet with mount" b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:statefulSetName}
spec:
  serviceName: ${2:serverName}# the name of service
  replicas: ${3:amount}
  template: # pod template
    metadata:
      labels:
        ${4:podLabelName}: ${5:podLabelValue}
    spec:
      containers:
        - name: ${6:containerName}
          image: ${7:containerImage}
          ports:
            - name: ${8:http}
              containerPort: ${9:8080}
    	  volumeMounts:
    	  - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	  mountPath: ${11:mountPath(container)}
      	  ${12:ReadOnly}: ${13:true}
      volumes: # define volumes
  	  - name: $10 # name of the volumes
    	  ${14:emptyDir}: ${15:{}} # define type is emptyDir
endsnippet

snippet sts3 "k8s normal statefulSet with env and mount" b
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ${1:statefulSetName}
spec:
  serviceName: ${2:serverName}# the name of service
  replicas: ${3:amount}
  template: # pod template
    metadata:
      labels:
        ${4:podLabelName}: ${5:podLabelValue}
    spec:
      containers:
        - name: ${6:containerName}
          image: ${7:containerImage}
          ports:
            - name: ${8:http}
              containerPort: ${9:8080}
    	  volumeMounts:
    	  - name: ${10:volumeName} # The volume called html is mounted at /usr/share/nginx/html in the container
      	  mountPath: ${11:mountPath(container)}
      	  ${12:ReadOnly}: ${13:true}
      	  env: # pass env to container
          - name: #${14:PORT} env name
            value: ${15:"5000"} # env value
      volumes: # define volumes
  	  - name: $10 # name of the volumes
    	  ${16:emptyDir}: ${17:{}} # define type is emptyDir
endsnippet

## SERVICE
snippet svc "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:Name}
spec:
  selector:
      ${2:app} : ${3:myAppName}
  ports:
    - protocol: ${4:protocol}
      port: ${5:Port}
      targetPort: ${6:targetPort}
endsnippet

snippet np "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:Name}
spec:
  type: NodePort
  selector:
      ${2:app} : ${3:myAppName}
  ports:
    - protocol: ${4:TCP}
      port: ${5:80}
      targetPort: ${6:8080}
      nodePort: ${7:31000}
endsnippet

snippet lb "Test" b
apiVersion: v1
kind: Service
metadata:
  name: ${1:serverName}
spec:
  selector:
    ${2:podLabelName}: ${3:podLabelNameValue}
  type: LoadBalancer
  ports:
    - protocol: ${4:TCP}
      port: ${5:80}
      targetPort: ${6:8080}
endsnippet

snippet in "Test" b
piVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${1:myIngressName}
spec:
  rules:
    - host: ${2:replicaSet.example.com} # domain name
  http:
    paths:
      - path: ${3:/}
        backend:
          serviceName: ${4:serviceName} # name of the service inside cluster
          servicePort: ${5:serverPort}
endsnippet

snippet pv "Test" b
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${1:my-pvc}
spec:
  capacity:
    storage: ${2:5Gi}
  volumeMode: ${3:Filesystem}
  accessModes:
    - ${4:ReadWriteOnce}
  persistentVolumeReclaimPolicy: ${5:Recycle}
  storageClassName: ${6:myStorageClass} 
endsnippet

snippet emptyDir "Test" b
      volumeMounts:
        - name: ${1:volueName} # The volume called html is mounted at /usr/share/nginx/html in the container
          mountPath:${2:mountPath(container)} 
          ${3:ReadOnly}: ${4:true}
  volumes: # define volumes
    - name: $1 name of the volumes
      ${6:emptyDir}: ${7:{}} # define type is emptyDir
endsnippet

snippet hostPath "Test" b
      volumeMounts:
        - name: ${1:volueName} # The volume called html is mounted at /usr/share/nginx/html in the container
          mountPath:${2:mountPath(container)} 
          ${3:ReadOnly}: ${4:true}
  volumes: # define volumes
    - name: $1 name of the volumes
      hostPath: # hostPath volume
      	${6:path}: ${7:path} # define type is emptyDir
endsnippet

snippet gce "Test" b
      volumeMounts:
        - name: ${1:volueName} # The volume called html is mounted at /usr/share/nginx/html in the container
          mountPath:${2:mountPath(container)} 
          ${3:ReadOnly}: ${4:true}
  volumes: # define volumes
    - name: $1 name of the volumes
      gcePersistentDisk: # google cloud disk volume
        pdName: ${2:persistentVolumeName} # name of the persistent disk on google cloud
        fsType: ext4
endsnippet

snippet aws "Test" b
      volumeMounts:
        - name: ${1:volueName} # The volume called html is mounted at /usr/share/nginx/html in the container
          mountPath:${2:mountPath(container)} 
          ${3:ReadOnly}: ${4:true}
  volumes: # define volumes
    - name: $1 name of the volumes
      awsElasticBlockStore: # amazon web service volume
        volumeID: ${2:volumeID} # volume of the aws ebs
        fsType: ext4
endsnippet

snippet map "Test" b
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${1:configMapName}
data:
  ${2:DB}: ${3:postgre}
endsnippet

snippet netpo "Test" b
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ${1:networkPolicyName}
spec:
  podSelector:
    matchLabels:
      ${2:podLabelName}: ${3:podLabelValue} # Adjust the label to match the pods you want to allow
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - ipBlock:
          cidr: ${4:10.0.0.0/16}
      - podSelector:
          matchLabels:
            ${5:role}: ${6:database} # Adjust the label to match the allowed pods
  egress:
    - to:
      - ipBlock:
          cidr: ${7:10.0.0.0/16}
      - podSelector:
          matchLabels:
            ${8:role}: ${9:database} # Adjust the label to match the allowed pods
endsnippet

snippet env "K8s Env" b
env: # pass env to container
  - name: ${1:PORT} # env name
    value: ${2:"5000"} # env value
endsnippet

snippet imgsc "ImageSecretPull" b
imagePullSecrets:
- name: ${1:my-registry-key}
endsnippet

### DOCKER

### AWS
snippet bs "Buildspec.yml" b
version: 0.2

phases:
  install:
    commands:
      - $1
  pre_build:
    commands:
      - $2
  build:
    commands:
      - $3
  post_build:
    commands:
      - $4
artifacts:
  files:
    - $5
endsnippet


